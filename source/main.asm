;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;                                                                                                                                   
;           MASM64 OpenGL Project.                                                                                                 
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;----------[types modules constants procedure prototypes]------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
; option casemap:none
external equ extern
StdOutHandle equ -11
include macros/x64calling.inc
include macros/x64macros.inc
include include/kernel32.inc
include structdefs.asm
; include include/fileextd.inc

;----------[types]---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pointer typedef qword

vec3 struct
    x real4 ?
    y real4 ?
    z real4 ?
vec3 ends

;----------[macros]--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;----------[const section]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CS_CLASSDC equ 0040h
CS_OWNDC equ 0020h
CS_HREDRAW equ 0002h
CS_VREDRAW equ 0001h

.const
outputmessage byte 'hello, world!'
              byte 0ah, 0dh
              byte 'from masm64!'
              byte 0ah, 0dh
outputmessagelength equ $ - outputmessage

window_class_title byte "MASM64HandmadeWindowClass", 0Ah, 0dh
window_class_title_length equ $ - window_class_title 

;----------[data section]--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
.data
backing byte 1024 dup(?)
arr dword 1024 dup(?)

phrase byte "This is a phrase", 0Ah, 0dh
phraselength equ $ - phrase 
hInstance qword ?
nShowCmd sdword 10
wndclass WNDCLASSEXA <>
style word ?
;----------[code section]--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
.code
WindowProc proc
    ret
WindowProc endp

main proc
    ;-----[print hello]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    ; print something to the console using writefile then write to std out.             
    ; this procedure also shows the win64 calling convention.                           
    ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    mov rcx, StdOutHandle              ; output handle arg
    call GetStdHandle                        ; get handle from os

    ;-----[print hello]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    ; note: how to calculate param stack location:
    ; nth parm - 1 = (5 - 1) * 8 = 32 bytes
    ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    sub rsp, 40                             ; WriteFile(5 parms) * 8 = 40 bytes
    mov rcx, rax                            ; [0] hFile
    lea rdx, outputmessage                  ; [1] lpBuffer
    mov r8, outputmessagelength             ; [2] nNumberOfBytesToWrite
    xor r9, r9                              ; [3] lpNumberOfBytesWritten
    mov [rsp + 32], r9                      ; [4] lpOverlapped
    call WriteFile                           ; print
    add rsp, 40                             ; balance the stack

    xor rcx, rcx
    call GetModuleHandleA
    mov hInstance, rax

    xor cx, cx
    mov cx, CS_OWNDC
    or cx, CS_HREDRAW
    or cx, CS_VREDRAW
    mov wndclass.WNDCLASSEXA.dwStyle, CS_OWNDC
    lea rcx, WindowProc
    mov wndclass.WNDCLASSEXA.lpfnWndProc, rcx
    lea rcx, hInstance
    mov wndclass.WNDCLASSEXA.hInst, rcx
    lea rcx, window_class_title
    mov wndclass.WNDCLASSEXA.lpszClassName, rcx

    ;-----[terminate program]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    ; these instructions show how to cleanly exit the program.                          
    ;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    xor rcx, rcx                            ; set termination code 0 for clean exit
    call ExitProcess                         ; terminate process
    ret 0                                   ; return code
main endp                                                                                ; end proc
end                                                                                 ; end module
